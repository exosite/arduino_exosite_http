//************************************************************************************************
// BSD 3-Clause License
//
// Copyright (c) 2025, Exosite
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//************************************************************************************************

#pragma once

#include <ArduinoBearSSL.h>

/*
//  The following was created by running the BearSSL "brssl" tool in ../extras/TrustAnchors:
//    brssl ta *.pem
//
//    Reading file 'DigiCertGlobalRootCA.pem': 1 trust anchor
//    Reading file 'ExositeRootCA.pem': 1 trust anchor
*/

/*
  issuer=C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert Global Root CA
  subject=C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert Global Root CA
  notBefore=Nov 10 00:00:00 2006 GMT
  notAfter=Nov 10 00:00:00 2031 GMT
*/
static const unsigned char TA0_DN[] = {
  0x30, 0x61, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
  0x02, 0x55, 0x53, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0A,
  0x13, 0x0C, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x49,
  0x6E, 0x63, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x13,
  0x10, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72,
  0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x31, 0x20, 0x30, 0x1E, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x13, 0x17, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74,
  0x20, 0x47, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x20, 0x52, 0x6F, 0x6F, 0x74,
  0x20, 0x43, 0x41
};

static const unsigned char TA0_RSA_N[] = {
  0xE2, 0x3B, 0xE1, 0x11, 0x72, 0xDE, 0xA8, 0xA4, 0xD3, 0xA3, 0x57, 0xAA,
  0x50, 0xA2, 0x8F, 0x0B, 0x77, 0x90, 0xC9, 0xA2, 0xA5, 0xEE, 0x12, 0xCE,
  0x96, 0x5B, 0x01, 0x09, 0x20, 0xCC, 0x01, 0x93, 0xA7, 0x4E, 0x30, 0xB7,
  0x53, 0xF7, 0x43, 0xC4, 0x69, 0x00, 0x57, 0x9D, 0xE2, 0x8D, 0x22, 0xDD,
  0x87, 0x06, 0x40, 0x00, 0x81, 0x09, 0xCE, 0xCE, 0x1B, 0x83, 0xBF, 0xDF,
  0xCD, 0x3B, 0x71, 0x46, 0xE2, 0xD6, 0x66, 0xC7, 0x05, 0xB3, 0x76, 0x27,
  0x16, 0x8F, 0x7B, 0x9E, 0x1E, 0x95, 0x7D, 0xEE, 0xB7, 0x48, 0xA3, 0x08,
  0xDA, 0xD6, 0xAF, 0x7A, 0x0C, 0x39, 0x06, 0x65, 0x7F, 0x4A, 0x5D, 0x1F,
  0xBC, 0x17, 0xF8, 0xAB, 0xBE, 0xEE, 0x28, 0xD7, 0x74, 0x7F, 0x7A, 0x78,
  0x99, 0x59, 0x85, 0x68, 0x6E, 0x5C, 0x23, 0x32, 0x4B, 0xBF, 0x4E, 0xC0,
  0xE8, 0x5A, 0x6D, 0xE3, 0x70, 0xBF, 0x77, 0x10, 0xBF, 0xFC, 0x01, 0xF6,
  0x85, 0xD9, 0xA8, 0x44, 0x10, 0x58, 0x32, 0xA9, 0x75, 0x18, 0xD5, 0xD1,
  0xA2, 0xBE, 0x47, 0xE2, 0x27, 0x6A, 0xF4, 0x9A, 0x33, 0xF8, 0x49, 0x08,
  0x60, 0x8B, 0xD4, 0x5F, 0xB4, 0x3A, 0x84, 0xBF, 0xA1, 0xAA, 0x4A, 0x4C,
  0x7D, 0x3E, 0xCF, 0x4F, 0x5F, 0x6C, 0x76, 0x5E, 0xA0, 0x4B, 0x37, 0x91,
  0x9E, 0xDC, 0x22, 0xE6, 0x6D, 0xCE, 0x14, 0x1A, 0x8E, 0x6A, 0xCB, 0xFE,
  0xCD, 0xB3, 0x14, 0x64, 0x17, 0xC7, 0x5B, 0x29, 0x9E, 0x32, 0xBF, 0xF2,
  0xEE, 0xFA, 0xD3, 0x0B, 0x42, 0xD4, 0xAB, 0xB7, 0x41, 0x32, 0xDA, 0x0C,
  0xD4, 0xEF, 0xF8, 0x81, 0xD5, 0xBB, 0x8D, 0x58, 0x3F, 0xB5, 0x1B, 0xE8,
  0x49, 0x28, 0xA2, 0x70, 0xDA, 0x31, 0x04, 0xDD, 0xF7, 0xB2, 0x16, 0xF2,
  0x4C, 0x0A, 0x4E, 0x07, 0xA8, 0xED, 0x4A, 0x3D, 0x5E, 0xB5, 0x7F, 0xA3,
  0x90, 0xC3, 0xAF, 0x27
};

static const unsigned char TA0_RSA_E[] = {
  0x01, 0x00, 0x01
};

/*
  issuer=C=US, ST=Minnesota, L=Minneapolis, O=Exosite, CN=Exosite Root CA RSA 2048
  subject=C=US, ST=Minnesota, L=Minneapolis, O=Exosite, CN=Exosite Root CA RSA 2048
  notBefore=Jun 13 19:13:16 2018 GMT
  notAfter=Jun 13 19:13:16 2058 GMT
*/
static const unsigned char TA1_DN[] = {
  0x30, 0x6C, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
  0x02, 0x55, 0x53, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x08,
  0x0C, 0x09, 0x4D, 0x69, 0x6E, 0x6E, 0x65, 0x73, 0x6F, 0x74, 0x61, 0x31,
  0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x0B, 0x4D, 0x69,
  0x6E, 0x6E, 0x65, 0x61, 0x70, 0x6F, 0x6C, 0x69, 0x73, 0x31, 0x10, 0x30,
  0x0E, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x07, 0x45, 0x78, 0x6F, 0x73,
  0x69, 0x74, 0x65, 0x31, 0x21, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x0C, 0x18, 0x45, 0x78, 0x6F, 0x73, 0x69, 0x74, 0x65, 0x20, 0x52, 0x6F,
  0x6F, 0x74, 0x20, 0x43, 0x41, 0x20, 0x52, 0x53, 0x41, 0x20, 0x32, 0x30,
  0x34, 0x38
};

static const unsigned char TA1_RSA_N[] = {
  0xF5, 0x0E, 0xE1, 0x45, 0x87, 0x61, 0xFA, 0xD8, 0xFA, 0xB5, 0x66, 0xB2,
  0xB9, 0x52, 0x6F, 0x8D, 0x33, 0x3C, 0x5B, 0x80, 0x4B, 0x2A, 0xE5, 0x01,
  0x1A, 0x9D, 0xC0, 0xDA, 0x54, 0xBC, 0x9A, 0xC7, 0xDB, 0x4C, 0x2D, 0x48,
  0xB0, 0x59, 0x8D, 0x02, 0x2E, 0x86, 0x55, 0x68, 0xA1, 0x32, 0x35, 0xC1,
  0x30, 0x01, 0xF3, 0x18, 0x94, 0xA9, 0xAA, 0xD0, 0xF8, 0x37, 0xFD, 0x59,
  0x9D, 0xF0, 0x73, 0xB0, 0x62, 0x9F, 0x7A, 0x7D, 0x99, 0x52, 0x43, 0x3F,
  0x06, 0xA2, 0x62, 0x7A, 0xD7, 0x4F, 0x0F, 0x84, 0xBD, 0x81, 0x5C, 0xD0,
  0xA7, 0xBA, 0x88, 0xEC, 0xC0, 0x7C, 0x31, 0xE4, 0xD7, 0xA1, 0x8D, 0xAA,
  0x4D, 0x42, 0x6F, 0xE2, 0xF7, 0x97, 0xD6, 0x37, 0xD9, 0xE1, 0xC8, 0xE6,
  0xA9, 0x9C, 0x33, 0xC3, 0x26, 0x4B, 0x90, 0x4F, 0xF7, 0x99, 0x5D, 0xB4,
  0x44, 0x1A, 0x34, 0x3C, 0xF7, 0x96, 0x99, 0x59, 0xE4, 0x94, 0xA9, 0x6B,
  0x99, 0x2F, 0x5E, 0xA3, 0xA8, 0x2B, 0xA5, 0xDF, 0xDC, 0x97, 0xC4, 0x16,
  0xEE, 0xF5, 0x8C, 0xC3, 0xA1, 0x7C, 0x98, 0x72, 0x6C, 0x21, 0xC0, 0x32,
  0x25, 0x86, 0x6D, 0x0E, 0x49, 0x15, 0x65, 0x0E, 0xA7, 0x0D, 0xDE, 0x42,
  0xFE, 0x30, 0x8C, 0x8A, 0xB5, 0x3E, 0x3A, 0xAC, 0x4E, 0x94, 0x98, 0x03,
  0x0A, 0x58, 0x5D, 0xD6, 0xD8, 0x85, 0xE1, 0xF3, 0xBB, 0xC0, 0xE2, 0x8F,
  0x65, 0xD7, 0x1F, 0x11, 0xE5, 0xB7, 0x2B, 0xC4, 0xCE, 0xBB, 0x35, 0x66,
  0x37, 0xFC, 0x72, 0x15, 0x86, 0xF1, 0xED, 0x24, 0x87, 0xA4, 0xEB, 0xEA,
  0xF8, 0xE1, 0x8F, 0x5A, 0x89, 0xD6, 0x98, 0xD2, 0x04, 0xB7, 0x70, 0xA4,
  0x51, 0x75, 0x32, 0x53, 0x3B, 0xCD, 0x12, 0xA0, 0x4D, 0xBC, 0x01, 0x7A,
  0x16, 0xF1, 0x3F, 0x60, 0x73, 0x9B, 0xCC, 0xD6, 0xC9, 0x49, 0x56, 0xF2,
  0x65, 0x1F, 0x66, 0xCB
};

static const unsigned char TA1_RSA_E[] = {
  0x01, 0x00, 0x01
};

static const br_x509_trust_anchor EXOSITE_TAs[2] = {
  {
    { (unsigned char *)TA0_DN, sizeof TA0_DN },
    BR_X509_TA_CA,
    {
      BR_KEYTYPE_RSA,
      { .rsa = {
        (unsigned char *)TA0_RSA_N, sizeof TA0_RSA_N,
        (unsigned char *)TA0_RSA_E, sizeof TA0_RSA_E,
      } }
    }
  },
  {
    { (unsigned char *)TA1_DN, sizeof TA1_DN },
    BR_X509_TA_CA,
    {
      BR_KEYTYPE_RSA,
      { .rsa = {
        (unsigned char *)TA1_RSA_N, sizeof TA1_RSA_N,
        (unsigned char *)TA1_RSA_E, sizeof TA1_RSA_E,
      } }
    }
  }
};

#define EXOSITE_TAs_NUM   2
